service: aws-git-hook
frameworkVersion: ">=1.28.0 <2.0.0"

custom:
  stage: ${opt:stage, self:provider.stage}
  tableName: RegistedRepositories-${self:custom.stage}
  region: ap-northeast-1

provider:
  stage: dev
  name: aws
  runtime: go1.x
  region: ap-northeast-1
  memorySize: 128
  deploymentBucket:
    name:
    serverSideEncryption: AES256
    tags:
      Product: GitHook
      Environment: dev

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [ WebHookTable, Arn ]

#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
  environment:
    TABLENAME: ${self:custom.tableName}
    REGION: ${self:custom.region}

package:
 exclude:
   - ./**
 include:
   - ./bin/**

functions:
  hookReciever:
    handler: bin/hookReciever
    events:
      - http:
          path: /hooks
          method: POST
  oAuthCallBack:
    handler: bin/oauthCallback
    events:
      - http:
          path: /callback
          method: POST

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    - ${file(resources/dynamodb.yaml)}
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
